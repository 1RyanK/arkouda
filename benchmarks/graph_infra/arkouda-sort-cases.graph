perfkeys: uniform int64 16-bit average rate =, uniform int64 32-bit average rate =, uniform int64 64-bit average rate =, uniform float64 (0, 1) average rate =
graphkeys: 16-bit, 32-bit, 64-bit, float64
files: sort-cases.dat
graphtitle: Uniformly Distributed Data
ylabel: Performance (GiB/s)

perfkeys: power-law int64 average rate =, power-law float64 average rate =
graphkeys: int64 32-bit, float64
files: sort-cases.dat
graphtitle: Power-Law Distributed Data
ylabel: Performance (GiB/s)

perfkeys: RMAT int64 average rate =
graphkeys: RMAT int64
files: sort-cases.dat
graphtitle: RMAT-Generated Edges (coargsort)
ylabel: Performance (GiB/s)

perfkeys: block-sorted concat int64 average rate =, block-sorted interleaved int64 average rate =
graphkeys: concatenated int64 32-bit, interleaved int64 32-bit
files: sort-cases.dat
graphtitle: Combinations of Sorted Arrays
ylabel: Performance (GiB/s)

perfkeys: refinement int64 average rate =
graphkeys: 2*(int64 32-bit)
files: sort-cases.dat
graphtitle: Refinement of Sorted Array with an Unsorted Array (coargsort)
ylabel: Performance (GiB/s)

perfkeys: datetime64[ns] average rate =
graphkeys: datetime64[ns]
files: sort-cases.dat
graphtitle: Simulated Timestamps with 1-Second Precision Stored as datetime64[ns]
ylabel: Performance (GiB/s)

perfkeys: IP-like 2*int64 average rate =
graphkeys: IP-like 2*int64
files: sort-cases.dat
graphtitle: Simulated 90/10 Mix of IPv4/IPv6 Addresses (cargsort)
ylabel: Performance (GiB/s)
