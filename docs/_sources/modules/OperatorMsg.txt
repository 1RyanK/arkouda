.. default-domain:: chpl

.. module:: OperatorMsg

OperatorMsg
===========
**Usage**

.. code-block:: chapel

   use OperatorMsg;

.. function:: proc binopvvMsg(reqMsg: string, st: borrowed SymTab): string

   
   Parse and respond to binopvv message.
   vv == vector op vector
   
   :arg reqMsg: request containing (cmd,op,aname,bname,rname)
   :type reqMsg: string 
   
   :arg st: SymTab to act on
   :type st: borrowed SymTab 
   
   :returns: (string) 
   

.. function:: proc binopvsMsg(reqMsg: string, st: borrowed SymTab): string

   
   Parse and respond to binopvs message.
   vs == vector op scalar
   
   :arg reqMsg: request containing (cmd,op,aname,dtype,value)
   :type reqMsg: string 
   
   :arg st: SymTab to act on
   :type st: borrowed SymTab 
   
   :returns: (string) 
   

.. function:: proc binopsvMsg(reqMsg: string, st: borrowed SymTab): string

   
   Parse and respond to binopsv message.
   sv == scalar op vector
   
   :arg reqMsg: request containing (cmd,op,dtype,value,aname)
   :type reqMsg: string 
   
   :arg st: SymTab to act on
   :type st: borrowed SymTab 
   
   :returns: (string) 
   

.. function:: proc opeqvvMsg(reqMsg: string, st: borrowed SymTab): string

   
   Parse and respond to opeqvv message.
   vector op= vector
   
   :arg reqMsg: request containing (cmd,op,aname,bname)
   :type reqMsg: string 
   
   :arg st: SymTab to act on
   :type st: borrowed SymTab 
   
   :returns: (string) 
   

.. function:: proc opeqvsMsg(reqMsg: string, st: borrowed SymTab): string

   
   Parse and respond to opeqvs message.
   vector op= scalar
   
   :arg reqMsg: request containing (cmd,op,aname,bname,rname)
   :type reqMsg: string 
   
   :arg st: SymTab to act on
   :type st: borrowed SymTab 
   
   :returns: (string) 
   
   

