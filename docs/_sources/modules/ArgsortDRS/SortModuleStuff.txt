.. default-domain:: chpl

.. module:: SortModuleStuff

SortModuleStuff
===============
**Usage**

.. code-block:: chapel

   use ArgsortDRS.SortModuleStuff;

.. data:: param RADIX_BITS = 8

   
   This is the number of bits to sort at a time in the radix sorter.
   The code assumes that all integer types are a multiple of it.
   That would need to change if it were to increase.
   
   At the same time, using a value less than 8 will probably perform poorly.
   

.. function:: proc binForRecordKeyPart(a, criterion, startbit: int)

   Get the bin for a record by calling criterion.keyPart
   :arg a:
   :arg criterion:
   :arg startbit: starting from 0.
   
   
   bin 0 is for the end was reached (sort before).
   bins 1..256 are for data with next part 0..255.
   bin 256 is for the end was reached (sort after).
   
   ubits are the result of keyPart normalized to a uint.
   
   :returns: (bin, ubits)
   

.. function:: proc fixedWidth(type eltTy) param

   
   Returns the fixed number of bits in a value, if known.
   Returns -1 otherwise.
   

.. function:: proc msbRadixSortParamLastStartBit(Data: [], comparator) param

   
   Returns a compile-time known final startbit.
   e.g. for uint(64), returns 56 (since that's 64-8 and the
   last sort pass will sort on the last 8 bits).
   
   Returns -1 if no such ending is known at compile-time.
   
   :arg Data: 
   :arg comparator:
   

.. function:: proc findDataStartBit(startbit: int, min_ubits, max_ubits): int

   
   Compute the startbit location that could be used based on the
   min/max of values returned by keyPart.
   
   :arg startbit:
   :arg min_ubits:
   :arg max_ubits:
   
   :returns: new_start_bit_rounded (int)
   

.. function:: proc checkSorted(start_n: int, end_n: int, A: [], criterion, startbit = 0)

   
   Check that the elements from start_n..end_n in A are sorted by criterion
   
   :arg start_n:
   :type start_n: int
   
   :arg end_n:
   :type end_n: int
   
   :arg A: array
   :type A: []
   
   :arg criterion:
   :arg startbit: defaults to 0
   

