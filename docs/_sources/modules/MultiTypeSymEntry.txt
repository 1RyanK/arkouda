.. default-domain:: chpl

.. module:: MultiTypeSymEntry

MultiTypeSymEntry
=================
**Usage**

.. code-block:: chapel

   use MultiTypeSymEntry;

.. enum:: enum DType { Int64, Float64, Bool, UNDEF }

   In chapel the types int and real defalut to int(64) and real(64).
   We also need other types like float32, int32, etc 


.. function:: proc whichDtype(type etype) param: DType

   
   Take a chapel type and returns the matching DType 
   
   :arg etype: chapel type
   
   :returns: DType
   

.. function:: proc dtypeSize(dt: DType): int

   Returns the size in bytes of a DType 
   
   :arg dt: (pythonic) DType
   :type dt: DType
   
   :returns: (int)
   

.. function:: proc str2dtype(dstr: string): DType

   Turns a dtype string in pythonland into a DType 
   
   :arg dstr: pythonic dtype to be converted
   :type dstr: string
   
   :returns: DType
   

.. function:: proc dtype2str(dtype: DType): string

   Turns a DType into a dtype string in pythonland 
   
   :arg dtype: DType to convert to string
   :type dtype: DType
   
   :returns: (string)
   

.. function:: proc makeDistDom(size: int)

   
   Uses the MyDmap config param in ServerConfig.chpl::
       *if MyDmap == 0 {return (type CyclicDom(1,int(64),false));}* 
   
       *if MyDmap == 1 {return (type BlockDom(1,int(64),false,unmanaged DefaultDist));}*
   
   :arg size: size of domain
   :type size: int
   
   **Note**: if MyDmap does not evaluate to 0 or 1, Cyclic Distribution will be selected. 
   Cyclic Distribution is currently not fully supported.
   **Note 2**: MyDmap is by default set to 1 in ServerConfig.chpl
   

.. function:: proc makeDistArray(size: int, type etype)

   
   Makes an array of specified type over a distributed domain
   
   :arg size: size of the domain
   :type size: int 
   
   :arg etype: desired type of array
   :type etype: type
   
   :returns: [] ?etype
   

.. function:: proc makeDistDomType(size: int) type

   
   Returns the type of the distributed domain
   
   :arg size: size of domain
   :type size: int
   
   :returns: type
   

.. function:: proc toSymEntry(gse: borrowed GenSymEntry, type etype)

   Casts a GenSymEntry to the specified type and returns it.
   
   **Dev Note**: too much type inference still for my taste! Takes a generic sym entry and 
   instantiates a SymEntry with the specified type.
   
   :arg gse: general sym entry
   :type gse: borrowed GenSymEntry
   
    :arg etype: type for gse to be cast to
    :type etype: type
   

.. function:: proc printOwnership(x)

   1.18 version print out localSubdomains 
   
   :arg x: array
   :type x: [] 
   

.. class:: GenSymEntry

   This is a dummy class to avoid having to talk about specific
   instantiations of SymEntry. 


   .. attribute:: var dtype: DType

   .. attribute:: var itemsize: int

   .. attribute:: var size: int = 0

   .. attribute:: var ndim: int = 1

   .. attribute:: var shape: 1*(int) = (0)

   .. method:: proc init(type etype, len: int = 0)

.. class:: SymEntry : GenSymEntry

   Symbol table entry
   Only supports 1-d arrays for now 


   .. attribute:: type etype

      
      generic element type array
      etype is different from dtype (chapel vs numpy)
      

   .. attribute:: var aD: makeDistDom(size).type 

      
      'aD' is the distributed domain for 'a' whose value and type
      are defined by makeDistDom() to support varying distributions
      

   .. attribute:: var a: [aD] etype

   .. method:: proc init(len: int, type etype)

      
      This init takes length and element type
      
      :arg len: length of array to be allocated
      :type len: int
      
      :arg etype: type to be instantiated
      :type etype: type
      

   .. method:: proc init(a: [?D] ?etype)

      This init takes an array of a type
      
      :arg a: array
      :type a: [] ?etype
      

   .. method:: proc postinit()

      
      Verbose flag utility method
      

   .. method:: proc deinit()

      
      Verbose flag utility method
      

