.. default-domain:: chpl

.. module:: MultiTypeSymEntry

MultiTypeSymEntry
=================
**Usage**

.. code-block:: chapel

   use MultiTypeSymEntry;

.. enum:: enum DType { Int64, Float64, Bool, UNDEF }

   in chapel the types int and real defalut to int(64) and real(64)
   also need other types like float32, int32, etc 


.. function:: proc whichDtype(type etype) param: DType

   take a chapel type and returns the matching DType 

.. function:: proc dtypeSize(dt: DType): int

   return the size in bytes of a DType 

.. function:: proc str2dtype(dstr: string): DType

   turns a dtype string in pythonland into a DType 

.. function:: proc dtype2str(dtype: DType): string

   turns a DType into a dtype string in pythonland 

.. function:: proc makeDistDom(size: int)

   uses the MyDmap config param in ServerConfig.chpl
   if MyDmap = 0 {return (type CyclicDom(1,int(64),false));}
   if MyDmap = 1 {return (type BlockDom(1,int(64),false,unmanaged DefaultDist));} 

.. function:: proc makeDistArray(size: int, type etype)

   make an array of the dmapped dom and type I want 

.. function:: proc makeDistDomType(size: int) type

   retrun the type of the dist domain 

.. function:: proc toSymEntry(gse: borrowed GenSymEntry, type etype)

   cast the symbol entry of the right type and return it
   blah too much type inference still for my taste 

.. function:: proc printOwnership(x)

   1.18 version print out localSubdomains 

.. class:: GenSymEntry

   This is a dummy class to avoid having to talk about specific
   instantiations of SymEntry. 


   .. attribute:: var dtype: DType

   .. attribute:: var itemsize: int

   .. attribute:: var size: int = 0

   .. attribute:: var ndim: int = 1

   .. attribute:: var shape: 1*(int) = (0)

   .. method:: proc init(type etype, len: int = 0)

.. class:: SymEntry : GenSymEntry

   symbol table entry
   we will just do 1-d arrays for now 


   .. attribute:: type etype

   .. attribute:: var aD: makeDistDom(size).type 

   .. attribute:: var a: [aD] etype

   .. method:: proc init(len: int, type etype)

   .. method:: proc init(a: [?D] ?etype)

   .. method:: proc postinit()

   .. method:: proc deinit()

